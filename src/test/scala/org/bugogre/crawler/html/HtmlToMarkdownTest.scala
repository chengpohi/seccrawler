package org.bugogre.crawler.html

import org.bugogre.crawler.builder.HtmlPageBuilder
import org.scalatest.FlatSpec

/**
 * Created by xiachen on 3/26/15.
 */
class HtmlToMarkdownTest extends FlatSpec {
  val html = HtmlPageBuilder.HTML_MARKDOWN
  val stackOverflowHtml = "<div class=\"post-text\" itemprop=\"text\">\n\n        <p>Consider the following 2 alternate APIs:</p>\n\n<pre class=\"lang-java prettyprint prettyprinted\"><code><span class=\"kwd\">void</span><span class=\"pln\"> method</span><span class=\"pun\">(</span><span class=\"typ\">List</span><span class=\"pun\">&lt;?&gt;</span><span class=\"pln\"> list</span><span class=\"pun\">)</span><span class=\"pln\">\n</span><span class=\"pun\">&lt;</span><span class=\"pln\">T</span><span class=\"pun\">&gt;</span><span class=\"pln\"> </span><span class=\"kwd\">void</span><span class=\"pln\"> method</span><span class=\"pun\">(</span><span class=\"typ\">List</span><span class=\"pun\">&lt;</span><span class=\"pln\">T</span><span class=\"pun\">&gt;</span><span class=\"pln\"> list</span><span class=\"pun\">)</span></code></pre>\n\n<p>I know that their internal implementation will have many differences to deal with. such as List&lt;'?&gt; wont be able to write into the list etc.</p>\n\n<p>Also, in my knowledge List&lt;'?&gt; will allow any parameterized type with List as base type. So will be the case with List&lt;'T&gt; also.</p>\n\n<p>Can anybody tell me if there is any difference at all in what kinds of inputs these 2 APIs will accept.(NOT the 2 APIs internal implementation differences)</p>\n\n<p>Thanks in advance.</p>\n\n    </div>"
  val comment = "<div style=\"display: block;\" class=\"comment-body\">\n                <span class=\"comment-copy\">I believe they'll accept exactly the same input. The limitations of <code>&lt;?&gt;</code> only appear when you try to work with the list and the type is relevant for some reason.</span>\n                â€“&nbsp;\n                    <a href=\"/users/2382246/blalasaadri\" title=\"2602 reputation\" class=\"comment-user\">blalasaadri</a>\n                <span class=\"comment-date\" dir=\"ltr\"><a class=\"comment-link\" href=\"#comment46873152_29343301\"><span title=\"2015-03-30 10:03:45Z\" class=\"relativetime-clean\">20 mins ago</span></a></span>\n                                                                            </div>"
  val question = "<div class=\"post-text\" itemprop=\"text\">\n\n        <p>I have the problem that i want to filter certain texts which may contain html.\nI use jsoup to whitelist and clean the tags which works pretty nice. </p>\n\n<p>I only have the problem that some of the tags can contain attributes, mostly style or classes but there could also be different attributes. (name, target, ect.) When cleaning this is no problem because they get stripped nicely but when whitelisting some tags which would be allowed get blocked because of the attributes. The basic whitelist does not seem to cover style or class attributes plus i cannot be shure what else i'm encountering. </p>\n\n<p>Since I want to allow quite a wide range of tags,  but remove most of them during cleaning, I don't want to add all attributes for all tags that I'm allowing. The simplest would be to strip all attributes from all tags, since I'm not interested in them anyway and then check if the stripped text with the plain tags is valid. </p>\n\n<p>Is there a function that removes all attributes or some simple loop, another option would be to tell the whitelister to ignore all attributes and simply whitelist on the tags.</p>\n\n    </div>"
  val answer = "<div class=\"post-text\" itemprop=\"text\">\n<p>The solution that finally worked for me is quite simple. I iterate through all elements, then iterate through all attributes and then remove them on the element, which leaves me with a cleaned version where i just have to validate the html-tags themselves. I think this is not the neatest way to solve the problem but it does what I wanted.</p>\n\n<pre class=\"lang-java prettyprint prettyprinted\"><code><span class=\"typ\">Document</span><span class=\"pln\"> doc </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Jsoup</span><span class=\"pun\">.</span><span class=\"pln\">parseBodyFragment</span><span class=\"pun\">(</span><span class=\"pln\">aText</span><span class=\"pun\">);</span><span class=\"pln\">\n</span><span class=\"typ\">Elements</span><span class=\"pln\"> el </span><span class=\"pun\">=</span><span class=\"pln\"> doc</span><span class=\"pun\">.</span><span class=\"pln\">getAllElements</span><span class=\"pun\">();</span><span class=\"pln\">\n</span><span class=\"kwd\">for</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"typ\">Element</span><span class=\"pln\"> e </span><span class=\"pun\">:</span><span class=\"pln\"> el</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"typ\">Attributes</span><span class=\"pln\"> at </span><span class=\"pun\">=</span><span class=\"pln\"> e</span><span class=\"pun\">.</span><span class=\"pln\">attributes</span><span class=\"pun\">();</span><span class=\"pln\">\n    </span><span class=\"kwd\">for</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"typ\">Attribute</span><span class=\"pln\"> a </span><span class=\"pun\">:</span><span class=\"pln\"> at</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n        e</span><span class=\"pun\">.</span><span class=\"pln\">removeAttr</span><span class=\"pun\">(</span><span class=\"pln\">a</span><span class=\"pun\">.</span><span class=\"pln\">getKey</span><span class=\"pun\">());</span><span class=\"pln\">\n    </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pun\">(</span><span class=\"typ\">Jsoup</span><span class=\"pun\">.</span><span class=\"pln\">isValid</span><span class=\"pun\">(</span><span class=\"pln\">doc</span><span class=\"pun\">.</span><span class=\"pln\">body</span><span class=\"pun\">().</span><span class=\"pln\">html</span><span class=\"pun\">(),</span><span class=\"pln\"> theLegalWhitelist</span><span class=\"pun\">))</span><span class=\"pln\">\n    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">else</span><span class=\"pln\">\n    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pun\">;</span></code></pre>\n    </div>"
  val htmlToMarkDown = new HtmlToMarkdown

  //println(htmlToMarkDown.parse(stackOverflowHtml))
  println(htmlToMarkDown.parse(html))
  "HtmlToMarkDown" should " parse header correctly" in {
    val result = htmlToMarkDown.parse(html)
    assert(result.contains("#"))
  }

  "HtmlToMarkDown" should " parse hr correctly" in {
    val result = htmlToMarkDown.parse(html)
  }
}
